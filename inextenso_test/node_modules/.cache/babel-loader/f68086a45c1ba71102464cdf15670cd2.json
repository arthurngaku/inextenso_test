{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp\\\\www\\\\reactjs\\\\inextenso_test\\\\src\\\\Items.jsx\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass Items extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = id => {\n      let items = { ...this.state.items\n      }; //Je teste si c'est checkbox de \"select All\" qui a été coché\n\n      if (id == 1) {\n        //Si il était déjà coché, je décoche tout le monde, sinon je coche tout le monde;\n        if (items[id].checked) Object.keys(items).map((key, index) => items[key].checked = false);else Object.keys(items).map((key, index) => items[key].checked = true);\n      } else {\n        //Si c'est un autre que \"Select All\" qui a été coché, je teste si il était déjà coché, je le décoche, sinon je le coche\n        if (items[id].checked) {\n          items[id].checked = false;\n          items[1].checked = false;\n        } else items[id].checked = true; //Je récupère le nombre d'élements coché de mon state, et je teste si tous les éléments sont cochés, si oui je coche le \"select all\", sinon je le décoche\n\n\n        let checkedNumber = 0;\n        Object.keys(this.state.items).map((key, index) => checkedNumber += items[key].checked ? 1 : 0);\n        if (checkedNumber >= Object.keys(items).length - 1) items[1].checked = true;else items[1].checked = false;\n      } //je mets à jour le composant\n\n\n      this.setState({\n        items: items\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"name\",\n      onChange: () => this.handleChange(this.props.items.id),\n      checked: this.props.items.checked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }), this.props.items.label));\n  }\n\n}\n\nexport default Items;","map":{"version":3,"sources":["C:/wamp/www/reactjs/inextenso_test/src/Items.jsx"],"names":["React","Component","Items","handleChange","id","items","state","checked","Object","keys","map","key","index","checkedNumber","length","setState","render","props","label"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,WAAP;;AAEA,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAG5BE,YAH4B,GAGZC,EAAD,IAAQ;AACrB,UAAIC,KAAK,GAAG,EAAC,GAAG,KAAKC,KAAL,CAAWD;AAAf,OAAZ,CADqB,CAGrB;;AACA,UAAGD,EAAE,IAAE,CAAP,EAAU;AACR;AACA,YAAIC,KAAK,CAACD,EAAD,CAAL,CAAUG,OAAd,EAAuBC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,GAAnB,CAAuB,CAACC,GAAD,EAAKC,KAAL,KAAcP,KAAK,CAACM,GAAD,CAAL,CAAWJ,OAAX,GAAmB,KAAxD,EAAvB,KACKC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,GAAnB,CAAuB,CAACC,GAAD,EAAKC,KAAL,KAAcP,KAAK,CAACM,GAAD,CAAL,CAAWJ,OAAX,GAAmB,IAAxD;AACN,OAJD,MAKK;AACH;AACA,YAAIF,KAAK,CAACD,EAAD,CAAL,CAAUG,OAAd,EAAuB;AACrBF,UAAAA,KAAK,CAACD,EAAD,CAAL,CAAUG,OAAV,GAAoB,KAApB;AACAF,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,GAAmB,KAAnB;AACD,SAHD,MAIKF,KAAK,CAACD,EAAD,CAAL,CAAUG,OAAV,GAAoB,IAApB,CANF,CAQH;;;AACA,YAAIM,aAAa,GAAG,CAApB;AACAL,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKH,KAAL,CAAWD,KAAvB,EAA8BK,GAA9B,CAAkC,CAACC,GAAD,EAAKC,KAAL,KAAeC,aAAa,IAAGR,KAAK,CAACM,GAAD,CAAL,CAAWJ,OAAX,GAAqB,CAArB,GAAyB,CAA1F;AACA,YAAGM,aAAa,IAAIL,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBS,MAAnB,GAA0B,CAA9C,EAAiDT,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,GAAmB,IAAnB,CAAjD,KACKF,KAAK,CAAC,CAAD,CAAL,CAASE,OAAT,GAAmB,KAAnB;AACN,OAtBoB,CAwBrB;;;AACA,WAAKQ,QAAL,CAAc;AAACV,QAAAA,KAAK,EAAEA;AAAR,OAAd;AACD,KA7B2B;AAAA;;AA+B5BW,EAAAA,MAAM,GAAI;AACR,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,IAAI,EAAC,MAA5B;AAAmC,MAAA,QAAQ,EAAE,MAAM,KAAKb,YAAL,CAAkB,KAAKc,KAAL,CAAWZ,KAAX,CAAiBD,EAAnC,CAAnD;AACO,MAAA,OAAO,EAAE,KAAKa,KAAL,CAAWZ,KAAX,CAAiBE,OADjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGG,KAAKU,KAAL,CAAWZ,KAAX,CAAiBa,KAHpB,CADK,CAAP;AAOD;;AAvC2B;;AA0C9B,eAAehB,KAAf","sourcesContent":["import React,{Component} from 'react';\nimport './App.css';\n\nclass Items extends Component {\n\n  //Fonction qui lors surgit de l'évenenement onChange des checkbox, je reçois en paramètre l'id de l'élément cliqué\n  handleChange = (id) => {\n    let items = {...this.state.items};\n\n    //Je teste si c'est checkbox de \"select All\" qui a été coché\n    if(id==1) {\n      //Si il était déjà coché, je décoche tout le monde, sinon je coche tout le monde;\n      if (items[id].checked) Object.keys(items).map((key,index)=> items[key].checked=false);\n      else Object.keys(items).map((key,index)=> items[key].checked=true);\n    }\n    else {\n      //Si c'est un autre que \"Select All\" qui a été coché, je teste si il était déjà coché, je le décoche, sinon je le coche\n      if (items[id].checked) {\n        items[id].checked = false;\n        items[1].checked = false;\n      }\n      else items[id].checked = true;\n\n      //Je récupère le nombre d'élements coché de mon state, et je teste si tous les éléments sont cochés, si oui je coche le \"select all\", sinon je le décoche\n      let checkedNumber = 0;\n      Object.keys(this.state.items).map((key,index) => checkedNumber+= items[key].checked ? 1 : 0);\n      if(checkedNumber >= Object.keys(items).length-1) items[1].checked = true;\n      else items[1].checked = false;\n    }\n\n    //je mets à jour le composant\n    this.setState({items: items});\n  }\n\n  render () {\n    return <li>\n      <label>\n        <input type=\"checkbox\" name=\"name\" onChange={() => this.handleChange(this.props.items.id)}\n               checked={this.props.items.checked}/>\n        {this.props.items.label}\n      </label>\n    </li>\n  }\n}\n\nexport default Items;\n"]},"metadata":{},"sourceType":"module"}