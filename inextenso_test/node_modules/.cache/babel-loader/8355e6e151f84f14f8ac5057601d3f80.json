{"ast":null,"code":"var _jsxFileName = \"C:\\\\wamp\\\\www\\\\reactjs\\\\inextenso_test\\\\src\\\\App.js\";\nimport React from 'react';\nimport './App.css';\nimport Items from \"./Items\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: {\n        1: {\n          id: 1,\n          label: \"Select all\",\n          checked: false\n        },\n        2: {\n          id: 2,\n          label: \"Item 1\",\n          checked: false\n        },\n        3: {\n          id: 3,\n          label: \"Item 2\",\n          checked: false\n        },\n        4: {\n          id: 4,\n          label: \"Item 3\",\n          checked: false\n        },\n        5: {\n          id: 5,\n          label: \"Item 4\",\n          checked: false\n        }\n      }\n    };\n\n    this.handleChange = id => {\n      let items = { ...this.state.items\n      }; //Je teste si c'est checkbox de \"select All\" qui a été coché\n\n      if (id == 1) {\n        //Si il était déjà coché, je décoche tout le monde, sinon je coche tout le monde;\n        if (items[id].checked) Object.keys(items).map((key, index) => items[key].checked = false);else {\n          Object.keys(items).map((key, index) => items[key].checked = true);\n          items[id].label = \"Unselect All\";\n        }\n      } else {\n        //Si c'est un autre que \"Select All\" qui a été coché, je teste si il était déjà coché, je le décoche, sinon je le coche\n        if (items[id].checked) {\n          items[id].checked = false;\n          items[1].checked = false;\n        } else items[id].checked = true; //Je récupère le nombre d'élements coché de mon state, et je teste si tous les éléments sont cochés, si oui je coche le \"select all\", sinon je le décoche\n\n\n        let checkedNumber = 0;\n        Object.keys(this.state.items).map((key, index) => checkedNumber += items[key].checked ? 1 : 0);\n        if (checkedNumber >= Object.keys(items).length - 1) items[1].checked = true;else items[1].checked = false;\n      } //je mets à jour le composant\n\n\n      this.setState({\n        items: items\n      });\n    };\n  }\n\n  render() {\n    const title = \"List of items\";\n    /*Je fais une boucle qui va afficher tous les éléments de mon state*/\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, title), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"Ul-noBullet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, Object.keys(this.state.items).map((key, index) => /*#__PURE__*/React.createElement(Items, {\n      items: this.state.items[key],\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/wamp/www/reactjs/inextenso_test/src/App.js"],"names":["React","Items","App","Component","state","items","id","label","checked","handleChange","Object","keys","map","key","index","checkedNumber","length","setState","render","title"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACNC,MAAAA,KAAK,EAAE;AACL,WAAE;AAACC,UAAAA,EAAE,EAAE,CAAL;AAAQC,UAAAA,KAAK,EAAE,YAAf;AAA6BC,UAAAA,OAAO,EAAE;AAAtC,SADG;AAEL,WAAE;AAACF,UAAAA,EAAE,EAAE,CAAL;AAAQC,UAAAA,KAAK,EAAE,QAAf;AAAyBC,UAAAA,OAAO,EAAE;AAAlC,SAFG;AAGL,WAAE;AAACF,UAAAA,EAAE,EAAE,CAAL;AAAQC,UAAAA,KAAK,EAAE,QAAf;AAAyBC,UAAAA,OAAO,EAAE;AAAlC,SAHG;AAIL,WAAE;AAACF,UAAAA,EAAE,EAAE,CAAL;AAAQC,UAAAA,KAAK,EAAE,QAAf;AAAyBC,UAAAA,OAAO,EAAE;AAAlC,SAJG;AAKL,WAAE;AAACF,UAAAA,EAAE,EAAE,CAAL;AAAQC,UAAAA,KAAK,EAAE,QAAf;AAAyBC,UAAAA,OAAO,EAAE;AAAlC;AALG;AADD,KAFwB;;AAAA,SAahCC,YAbgC,GAahBH,EAAD,IAAQ;AACrB,UAAID,KAAK,GAAG,EAAC,GAAG,KAAKD,KAAL,CAAWC;AAAf,OAAZ,CADqB,CAGrB;;AACA,UAAGC,EAAE,IAAE,CAAP,EAAU;AACR;AACA,YAAID,KAAK,CAACC,EAAD,CAAL,CAAUE,OAAd,EAAuBE,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmBO,GAAnB,CAAuB,CAACC,GAAD,EAAKC,KAAL,KAAcT,KAAK,CAACQ,GAAD,CAAL,CAAWL,OAAX,GAAmB,KAAxD,EAAvB,KACK;AACHE,UAAAA,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmBO,GAAnB,CAAuB,CAACC,GAAD,EAAMC,KAAN,KAAgBT,KAAK,CAACQ,GAAD,CAAL,CAAWL,OAAX,GAAqB,IAA5D;AACAH,UAAAA,KAAK,CAACC,EAAD,CAAL,CAAUC,KAAV,GAAgB,cAAhB;AACD;AACF,OAPD,MAQK;AACH;AACA,YAAIF,KAAK,CAACC,EAAD,CAAL,CAAUE,OAAd,EAAuB;AACrBH,UAAAA,KAAK,CAACC,EAAD,CAAL,CAAUE,OAAV,GAAoB,KAApB;AACAH,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,GAAmB,KAAnB;AACD,SAHD,MAIKH,KAAK,CAACC,EAAD,CAAL,CAAUE,OAAV,GAAoB,IAApB,CANF,CAQH;;;AACA,YAAIO,aAAa,GAAG,CAApB;AACAL,QAAAA,MAAM,CAACC,IAAP,CAAY,KAAKP,KAAL,CAAWC,KAAvB,EAA8BO,GAA9B,CAAkC,CAACC,GAAD,EAAKC,KAAL,KAAeC,aAAa,IAAGV,KAAK,CAACQ,GAAD,CAAL,CAAWL,OAAX,GAAqB,CAArB,GAAyB,CAA1F;AACA,YAAGO,aAAa,IAAIL,MAAM,CAACC,IAAP,CAAYN,KAAZ,EAAmBW,MAAnB,GAA0B,CAA9C,EAAiDX,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,GAAmB,IAAnB,CAAjD,KACKH,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,GAAmB,KAAnB;AACN,OAzBoB,CA2BrB;;;AACA,WAAKS,QAAL,CAAc;AAACZ,QAAAA,KAAK,EAAEA;AAAR,OAAd;AACD,KA1C+B;AAAA;;AA4ChCa,EAAAA,MAAM,GAAE;AACN,UAAMC,KAAK,GAAG,eAAd;AACA;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,KAAL,CADF,eAEE;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEIT,MAAM,CAACC,IAAP,CAAY,KAAKP,KAAL,CAAWC,KAAvB,EAA8BO,GAA9B,CAAkC,CAACC,GAAD,EAAKC,KAAL,kBAClC,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,KAAX,CAAiBQ,GAAjB,CAAd;AAAqC,MAAA,QAAQ,EAAE,KAAKJ,YAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAFJ,CAFF,CADF,CADF;AAaD;;AA5D+B;;AA+DlC,eAAeP,GAAf","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Items from \"./Items\";\n\nclass App extends React.Component {\n  //Je déclare le state où je liste les items comme si je listais\n  state = {\n    items: {\n      1:{id: 1, label: \"Select all\", checked: false},\n      2:{id: 2, label: \"Item 1\", checked: false},\n      3:{id: 3, label: \"Item 2\", checked: false},\n      4:{id: 4, label: \"Item 3\", checked: false},\n      5:{id: 5, label: \"Item 4\", checked: false},\n    }\n  }\n\n  //Fonction qui lors surgit de l'évenenement onChange des checkbox, je reçois en paramètre l'id de l'élément cliqué\n  handleChange = (id) => {\n    let items = {...this.state.items};\n\n    //Je teste si c'est checkbox de \"select All\" qui a été coché\n    if(id==1) {\n      //Si il était déjà coché, je décoche tout le monde, sinon je coche tout le monde;\n      if (items[id].checked) Object.keys(items).map((key,index)=> items[key].checked=false);\n      else {\n        Object.keys(items).map((key, index) => items[key].checked = true);\n        items[id].label=\"Unselect All\"\n      }\n    }\n    else {\n      //Si c'est un autre que \"Select All\" qui a été coché, je teste si il était déjà coché, je le décoche, sinon je le coche\n      if (items[id].checked) {\n        items[id].checked = false;\n        items[1].checked = false;\n      }\n      else items[id].checked = true;\n\n      //Je récupère le nombre d'élements coché de mon state, et je teste si tous les éléments sont cochés, si oui je coche le \"select all\", sinon je le décoche\n      let checkedNumber = 0;\n      Object.keys(this.state.items).map((key,index) => checkedNumber+= items[key].checked ? 1 : 0);\n      if(checkedNumber >= Object.keys(items).length-1) items[1].checked = true;\n      else items[1].checked = false;\n    }\n\n    //je mets à jour le composant\n    this.setState({items: items});\n  }\n\n  render(){\n    const title = \"List of items\";\n    /*Je fais une boucle qui va afficher tous les éléments de mon state*/\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h3>{title}</h3>\n          <ul className=\"Ul-noBullet\">\n            {\n              Object.keys(this.state.items).map((key,index) => (\n              <Items items={this.state.items[key]} onChange={this.handleChange} />\n            ))}\n          </ul>\n        </header>\n      </div>\n      )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}